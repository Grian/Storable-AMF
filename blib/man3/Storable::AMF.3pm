.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Storable::AMF 3pm"
.TH Storable::AMF 3pm "2010-10-20" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Storable::AMF \- serializing/deserializing AMF0/AMF3 data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Storable::AMF0 qw(freeze thaw); # or use Storable::AMF3 qw(freeze thaw)l for AMF3 format
\&
\&  $amf0 = freeze($perl_object);
\&  $perl_object = thaw($amf0);
\&
\&        
\&  # Store/retrieve to disk amf0 data
\&        
\&  store $perl_object, \*(Aqfile\*(Aq;
\&  $restored_perl_object = retrieve \*(Aqfile\*(Aq;
\&
\&
\&  use Storable::AMF0 qw(nstore freeze thaw dclone);
\&
\&  # Network order: Due to spec of AMF0 format objects (hash, arrayref) stored in network order.
\&  # and thus nstore and store are synonyms 
\&
\&  nstore \e%table, \*(Aqfile\*(Aq;
\&  $hashref = retrieve(\*(Aqfile\*(Aq); 
\&
\&  
\&  # Advisory locking
\&  use Storable::AMF0 qw(lock_store lock_nstore lock_retrieve)
\&  lock_store \e%table, \*(Aqfile\*(Aq;
\&  lock_nstore \e%table, \*(Aqfile\*(Aq;
\&  $hashref = lock_retrieve(\*(Aqfile\*(Aq);
\&  
\&  # Deparse one object
\&  use Storable::AMF0 qw(deparse_amf); 
\&
\&  my( $obj, $length_of_packet ) = deparse_amf( my $bytea = freeze($a1) . freeze($a) ... );
\&
\&  \- or \-
\&  $obj = deparse_amf( freeze($a1) . freeze($a) ... );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is (de)serializer for Adobe's \s-1AMF0/AMF3\s0 (Action Message Format ver 0\-3).
This is only module and it recognize only \s-1AMF\s0 data. 
Almost all function implemented in C for speed. 
And some cases faster then Storable( for me always)
.SH "EXPORT"
.IX Header "EXPORT"
.Vb 1
\&  None by default.
.Ve
.SH "MOTIVATION"
.IX Header "MOTIVATION"
There are several modules for work with \s-1AMF\s0 data and packets written in perl, but them are lack a speed.
This module writen in C for speed. Also this package allow freeze and thaw \s-1AMF3\s0 data which is nobody do.
.SH "ERROR REPORTING In case of errors functions freeze and thaw returns undef and set $@ error description. (Error description at the moment is criptic, forgive me..)"
.IX Header "ERROR REPORTING In case of errors functions freeze and thaw returns undef and set $@ error description. (Error description at the moment is criptic, forgive me..)"
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "freeze($obj) \-\-\- Serialize perl object($obj) to \s-1AMF\s0, and return \s-1AMF\s0 data" 4
.IX Item "freeze($obj) --- Serialize perl object($obj) to AMF, and return AMF data"
.PD 0
.IP "thaw($amf0) \-\-\- Deserialize \s-1AMF\s0 data to perl object, and return the perl object" 4
.IX Item "thaw($amf0) --- Deserialize AMF data to perl object, and return the perl object"
.ie n .IP "store $obj, $file \-\-\- Store serialized \s-1AMF0\s0 data to file" 4
.el .IP "store \f(CW$obj\fR, \f(CW$file\fR \-\-\- Store serialized \s-1AMF0\s0 data to file" 4
.IX Item "store $obj, $file --- Store serialized AMF0 data to file"
.ie n .IP "nstore $obj, $file \-\-\- Same as store" 4
.el .IP "nstore \f(CW$obj\fR, \f(CW$file\fR \-\-\- Same as store" 4
.IX Item "nstore $obj, $file --- Same as store"
.ie n .IP "retrieve $obj, $file \-\-\- Retrieve serialized \s-1AMF0\s0 data from file" 4
.el .IP "retrieve \f(CW$obj\fR, \f(CW$file\fR \-\-\- Retrieve serialized \s-1AMF0\s0 data from file" 4
.IX Item "retrieve $obj, $file --- Retrieve serialized AMF0 data from file"
.ie n .IP "lock_store $obj, $file \-\-\- Same as store but with Advisory locking" 4
.el .IP "lock_store \f(CW$obj\fR, \f(CW$file\fR \-\-\- Same as store but with Advisory locking" 4
.IX Item "lock_store $obj, $file --- Same as store but with Advisory locking"
.ie n .IP "lock_nstore $obj, $file \-\-\- Same as lock_store" 4
.el .IP "lock_nstore \f(CW$obj\fR, \f(CW$file\fR \-\-\- Same as lock_store" 4
.IX Item "lock_nstore $obj, $file --- Same as lock_store"
.ie n .IP "lock_retrieve $file \-\-\- Same as retrieve but with advisory locking" 4
.el .IP "lock_retrieve \f(CW$file\fR \-\-\- Same as retrieve but with advisory locking" 4
.IX Item "lock_retrieve $file --- Same as retrieve but with advisory locking"
.ie n .IP "deparse_amf $bytea \-\-\- deparse from bytea one item Return one object and number of bytes readed if scalar context return object" 4
.el .IP "deparse_amf \f(CW$bytea\fR \-\-\- deparse from bytea one item Return one object and number of bytes readed if scalar context return object" 4
.IX Item "deparse_amf $bytea --- deparse from bytea one item Return one object and number of bytes readed if scalar context return object"
.ie n .IP "dclone $file \-\-\- Deep cloning data structure" 4
.el .IP "dclone \f(CW$file\fR \-\-\- Deep cloning data structure" 4
.IX Item "dclone $file --- Deep cloning data structure"
.ie n .IP "ref_clear $obj \-\-\- recurrent cleaning arrayrefs and hashrefs." 4
.el .IP "ref_clear \f(CW$obj\fR \-\-\- recurrent cleaning arrayrefs and hashrefs." 4
.IX Item "ref_clear $obj --- recurrent cleaning arrayrefs and hashrefs."
.ie n .IP "ref_lost_memory $obj \-\-\- test if object contain lost memory fragments inside. (Example do { my $a = []; @$a=$a; $a})" 4
.el .IP "ref_lost_memory \f(CW$obj\fR \-\-\- test if object contain lost memory fragments inside. (Example do { my \f(CW$a\fR = []; @$a=$a; \f(CW$a\fR})" 4
.IX Item "ref_lost_memory $obj --- test if object contain lost memory fragments inside. (Example do { my $a = []; @$a=$a; $a})"
.PD
.SH "NOTICE"
.IX Header "NOTICE"
.Vb 1
\&  Storable::AMF is currently is at development stage.
.Ve
.SH "LIMITATION"
.IX Header "LIMITATION"
At current moment and with restriction of \s-1AMF0/AMF3\s0 format referrences to scalar are not serialized,
and can't/ may not serialize tied variables.
And dualvars (See Scalar::Util) are serialized as string value.
Freezing \s-1CODEREF\s0, \s-1IO\s0, Regexp, \s-1REF\s0, \s-1GLOB\s0, \s-1SCALAR\s0 referenses restricted.
.SH "TODO"
.IX Header "TODO"
Add some options to functions.
.PP
Document freezing and thawing XMLDocument, \s-1XML\s0, Date
May be add some \s-1IO\s0 and packet manipulated function (\s-1SEE\s0 \s-1AMF0/AMF3\s0 at Adobe)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Data::AMF, Storable, Storable::AMF0, Storable::AMF3
.SH "AUTHOR"
.IX Header "AUTHOR"
Anatoliy Grishaev, <grian at cpan dot org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010 by A. G. Grishaev
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.8 or,
at your option, any later version of Perl 5 you may have available.
